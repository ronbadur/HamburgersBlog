@model IEnumerable<HamburgersBlog.Models.GroupByAreaModel>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/d3")
<head>
    <style>
        .axis {
            font: 10px sans-serif;
        }

        .bar {
            fill: steelblue;
        }

            .bar:hover {
                fill: brown;
            }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

        .arc text {
            font: 10px sans-serif;
            text-anchor: middle;
        }

        .arc path {
            stroke: #fff;
        }
    </style>
</head>
<script type="text/javascript">
    const AreaEnum = ['Hazafon', 'Hadarom', 'Hamerkaz']

    $(document).ready(function () {
        //var svg = d3.select("svg"),
        //    margin = { top: 20, right: 20, bottom: 30, left: 40 },
        //    width = +svg.attr("width") - margin.left - margin.right,
        //    height = +svg.attr("height") - margin.top - margin.bottom;

        //var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
        //    y = d3.scaleLinear().rangeRound([height, 0]);

        //var g = svg.append("g")
        //    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        //d3.json("/Restaurants/GroupByAreaData", function (data) {
        //    x.domain(data.map(function (d) { return d.RestaurantName; }));
        //    y.domain([0, d3.max(data, function (d) { return d.TotalPosts; })]);

        //    g.append("g")
        //        .attr("class", "axis axis--x")
        //        .attr("transform", "translate(0," + height + ")")
        //        .call(d3.axisBottom(x));

        //    g.append("g")
        //        .attr("class", "axis axis--y")
        //        .call(d3.axisLeft(y).ticks(d3.max(data, function (d) { return d.TotalPosts; })))
        //        .append("text")
        //        .attr("transform", "rotate(-90)")
        //        .attr("y", 6)
        //        .attr("dy", "0.71em")
        //        .attr("text-anchor", "end")
        //        .text("Frequency");

        //    g.selectAll(".bar")
        //        .data(data)
        //        .enter().append("rect")
        //        .attr("class", "bar")
        //        .attr("x", function (d) { return x(d.RestaurantName); })
        //        .attr("y", function (d) { return y(d.TotalPosts); })
        //        .attr("width", x.bandwidth())
        //        .attr("height", function (d) { return height - y(d.TotalPosts); });

        //})

        var svg = d3.select("svg"),
            width = +svg.attr("width"),
            height = +svg.attr("height"),
            radius = Math.min(width, height) / 2,
            g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        var color = d3.scaleOrdinal(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

        var pie = d3.pie()
            .sort(null)
            .value(function (d) { return d.TotalRestaurants; });

        var path = d3.arc()
            .outerRadius(radius - 10)
            .innerRadius(0);

        var label = d3.arc()
            .outerRadius(radius - 40)
            .innerRadius(radius - 40);


        d3.json("/Restaurants/GroupByAreaData", function (data) {
                var arc = g.selectAll(".arc")
                    .data(pie(data))
                    .enter().append("g")
                    .attr("class", "arc");

                arc.append("path")
                    .attr("d", path)
                    .attr("fill", function (d) { return color(AreaEnum[d.data.Area]); });

                arc.append("text")
                    .attr("transform", function (d) { return "translate(" + label.centroid(d) + ")"; })
                    .attr("dy", "0.35em")
                    .text(function (d) { return AreaEnum[d.data.Area]; });

            //x.domain(data.map(function (d) { return d.RestaurantName; }));
            //y.domain([0, d3.max(data, function (d) { return d.TotalPosts; })]);

            //g.append("g")
            //    .attr("class", "axis axis--x")
            //    .attr("transform", "translate(0," + height + ")")
            //    .call(d3.axisBottom(x));

            //g.append("g")
            //    .attr("class", "axis axis--y")
            //    .call(d3.axisLeft(y).ticks(d3.max(data, function (d) { return d.TotalPosts; })))
            //    .append("text")
            //    .attr("transform", "rotate(-90)")
            //    .attr("y", 6)
            //    .attr("dy", "0.71em")
            //    .attr("text-anchor", "end")
            //    .text("Frequency");

            //g.selectAll(".bar")
            //    .data(data)
            //    .enter().append("rect")
            //    .attr("class", "bar")
            //    .attr("x", function (d) { return x(d.RestaurantName); })
            //    .attr("y", function (d) { return y(d.TotalPosts); })
            //    .attr("width", x.bandwidth())
            //    .attr("height", function (d) { return height - y(d.TotalPosts); });

        });    
    })
</script>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Area)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TotalRestaurants)
        </th>
    </tr>
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Area)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalRestaurants)
            </td>
        </tr>
    }
</table>
<br />
<u><b>Statistics:</b></u>
<br />
<svg width="480" height="250"></svg>
